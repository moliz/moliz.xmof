/*
* Copyright (c) 2012 Vienna University of Technology.
* All rights reserved. This program and the accompanying materials are made 
* available under the terms of the Eclipse Public License v1.0 which accompanies 
* this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
* 
* Contributors:
* Philip Langer - initial API and generator
*/
package org.modelexecution.fuml.convert.xmof.internal.gen;
    	
import javax.annotation.Generated;
import org.modelexecution.fuml.convert.impl.ConversionResultImpl;
import org.modelexecution.fuml.convert.xmof.internal.IElementPopulator;

@Generated(value="Generated by org.modelexecution.fuml.convert.xmof.gen.ElementPopulatorGenerator.xtend")
public class ExpansionRegionPopulator implements IElementPopulator {

	@Override
	public void populate(fUML.Syntax.Classes.Kernel.Element fumlElement,
		org.eclipse.emf.ecore.EModelElement element, ConversionResultImpl result) {
			
		if (!(element instanceof org.modelexecution.xmof.Syntax.Activities.ExtraStructuredActivities.ExpansionRegion) ||
			!(fumlElement instanceof fUML.Syntax.Activities.ExtraStructuredActivities.ExpansionRegion)) {
			return;
		}
		
		fUML.Syntax.Activities.ExtraStructuredActivities.ExpansionRegion fumlNamedElement = (fUML.Syntax.Activities.ExtraStructuredActivities.ExpansionRegion) fumlElement;
		org.modelexecution.xmof.Syntax.Activities.ExtraStructuredActivities.ExpansionRegion xmofElement = (org.modelexecution.xmof.Syntax.Activities.ExtraStructuredActivities.ExpansionRegion) element;
		
		fumlNamedElement.mode = castExpansionKind(xmofElement.getMode());
		
		for (org.modelexecution.xmof.Syntax.Activities.ExtraStructuredActivities.ExpansionNode value : xmofElement.getInputElement()) {
					fumlNamedElement.inputElement.add((fUML.Syntax.Activities.ExtraStructuredActivities.ExpansionNode) result.getFUMLElement(value));
		}
		
		
		for (org.modelexecution.xmof.Syntax.Activities.ExtraStructuredActivities.ExpansionNode value : xmofElement.getOutputElement()) {
					fumlNamedElement.outputElement.add((fUML.Syntax.Activities.ExtraStructuredActivities.ExpansionNode) result.getFUMLElement(value));
		}
		
		
	}
	
	private fUML.Syntax.Activities.ExtraStructuredActivities.ExpansionKind castExpansionKind(org.modelexecution.xmof.Syntax.Activities.ExtraStructuredActivities.ExpansionKind enumVal) {
		switch (enumVal.getValue()) {
			case org.modelexecution.xmof.Syntax.Activities.ExtraStructuredActivities.ExpansionKind.PARALLEL_VALUE:
				return fUML.Syntax.Activities.ExtraStructuredActivities.ExpansionKind.parallel;
			case org.modelexecution.xmof.Syntax.Activities.ExtraStructuredActivities.ExpansionKind.ITERATIVE_VALUE:
				return fUML.Syntax.Activities.ExtraStructuredActivities.ExpansionKind.iterative;
			case org.modelexecution.xmof.Syntax.Activities.ExtraStructuredActivities.ExpansionKind.STREAM_VALUE:
				return fUML.Syntax.Activities.ExtraStructuredActivities.ExpansionKind.stream;
		}
		return null;
	}
}
